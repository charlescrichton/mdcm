The aim of these modifications from the original mDCM is to enable it to run in the SharePoint Sandbox.

This has been done as part of the VRECI project at the OeRC.

 http://www.oerc.ox.ac.uk/research/vre-ci 

You can see a list of SharePoint sandbox restrictions here:

 http://msdn.microsoft.com/en-us/library/ee536577.aspx
 http://blah.winsmarts.com/2009-12-SharePoint_2010_Sandbox_solutions__Architecture_and_Restrictions.aspx


So this involves removing/turning off a lot of the functionality!

Although there are a couple of workarounds/bug fixes to do with IO Streams and XML, and some extra assembly annotations required.


Changes

1. Firstly we need to turn off unwanted features:

* Click on the 'Show All Files' icon at the top of the Solution Explorer so we can see the stuff we have turned off. 
* Right click on the DICOM/Native folder and select 'Unload Projects in Solutions Folder'. 
* Right click on the following projects and select 'Unload Project'. 
  * DICOM/Dicom.Codec 
  * DICOM/Dicom.Codec64 
  * DICOM/Dicom.Scu 
  * DICOM/Dicom.Dump
  * DICOM/Dicom.Tests

* Right click on the following items and select 'Exclude From Project'. 
  * DICOM/Dicom/HL7 
  * DICOM/Dicom/Network 
  * DICOM/Dicom/Utility/LogWriter.cs 
  * DICOM/Dicom/Utility/SyslogTarget.cs 
  * DICOM/Dicom/Debug.cs 
  * DICOM/Dicom.Linq/HL7 
* Right click on DICOM/Dicom/References/NLog and select 'Remove'. 

Your solution should now have "Solution 'DICOM' (2 projects)" at the top. 

2. Allow Partially Trusted Callers 

* Edit the following files to change the title, description, product, guid and 
  add allow trusted callers attribute. 
  * DICOM/Dicom/Properties/AssemblyInfo.cs 
  * DICOM/Dicom.Linq/Properties/AssemblyInfo.cs 

3. Modify Assembly Names 

In order not to clash with existing mDCM DLLs we modify the names produced.

* Get the properties for the DICOM/Dicom project from the context menu (or Alt-Enter). 
* Change the Assemby name to Dicom.SP.Sandbox 
* Do the same for the DICOM/Dicom.Linq project with the Assemby name of Dicom.Linq.SP.Sandbox. 

4. Remove Logging

We don't want the logging code in the SharePoint sandbox solution as it causes all sorts of security headaches.

* The easiest way is to build the solution. This will result in 7 errors. These are references to things we have removed. (The Logging code). 

** To resolve these: 

*** Error "The name 'Debug' does not exist in the current context" - Go to the code and comment out the line. Typically it will look like:

    Debug.Log.Info("Codec: {0}", codec.GetName() + m);. 

*** Error "The type or namespace name 'Debug' does not exist in the namespace 'Dicom' (are you missing an assembly reference?)" - Comment out the offending line as above. Typically it will be something like: 

    Dicom.Debug.Log.Warn("Unknown error while attempting to read sequence item.  Trying again with alternate encodings.");

5. Workaround XML Error (hexadecimal value 0x00, is an invalid character)

When some of our DICOM files are converted we get the following error:

 XML Error, '.', hexadecimal value 0x00, is an invalid character

To avoid this edit the DICOM/Dicom.Linq/Data/XDicom.cs file. 

Replace the code: 

 DcmElement element = (DcmElement)item;
 attr.Add(element.GetValueString());
 
with the following: 

 DcmElement element = (DcmElement)item;
 attr.SetAttributeValue("len", element.Length);
 {
     //Bug: '.', hexadecimal value 0x00, is an invalid character
     //See: http://forums.asp.net/t/1216196.aspx for given workaround.
     var elementValue = element.GetValueString();
     elementValue = System.Text.RegularExpressions.Regex.Replace(elementValue, "\\p{C}+", "");
     attr.Add(elementValue);
 }

6. Load DICOM from stream not file 

The mDCM DicomFileFormat.cs is designed to load from files. However we want to load files from SharePoint. This can only be done by loading via a stream. 

To do this we need to alter DICOM/Dicom/Data/DicomFileFormat.cs to support streams: 

* Replace the LoadFileMetaInfo method with the following: 
 
        /// <summary>
        /// Changes transfer syntax of dataset and updates file meta information
        /// </summary>
        /// <param name="ts">New transfer syntax</param>
        /// <param name="parameters">Encode/Decode params</param>
        public void ChangeTransferSytnax(DicomTransferSyntax ts, DcmCodecParameters parameters)
        {
            Dataset.ChangeTransferSyntax(ts, parameters);
            FileMetaInfo.TransferSyntax = ts;
        }
 
        /// <summary>
        /// Gets the file meta information from a DICOM file
        /// </summary>
        /// <param name="file">Filename</param>
        /// <returns>File meta information</returns>
        public static DcmFileMetaInfo LoadFileMetaInfo(String file)
        {
            using (FileStream fs = File.OpenRead(file))
            {
                DcmFileMetaInfo metainfo = LoadFileMetaInfo(fs);
                fs.Close();
                return metainfo;
            }
        }
 
        /// <summary>
        /// Loads the meta information from a DICOM file in a stream.
        /// Note that the caller is expected to dispose of the stream after usage.
        /// </summary>
        /// <param name="stream">The stream fontaining the DICOM file</param>
        /// <returns>File meta information</returns>
        public static DcmFileMetaInfo LoadFileMetaInfo(Stream stream)
        {
            stream.Seek(128, SeekOrigin.Begin);
            CheckFileHeader(stream);
            DicomStreamReader dsr = new DicomStreamReader(stream);
            DcmFileMetaInfo metainfo = new DcmFileMetaInfo();
            dsr.Dataset = metainfo;
            dsr.Read(DcmFileMetaInfo.StopTag, DicomReadOptions.Default | DicomReadOptions.FileMetaInfoOnly);
            return metainfo;
        }


* Replace the Load methods with the following methods:

        /// <summary>
        /// Loads a dicom file
        /// </summary>
        /// <param name="file">Filename</param>
        /// <param name="options">DICOM read options</param>
        public DicomReadStatus Load(String file, DicomReadOptions options)
        {
            return Load(file, null, options);
        }
 
        /// <summary>
        /// Loads a dicom file from a stream
        /// </summary>
        /// <param name="stream">Stream</param>
        /// <param name="options">DICOM read options</param>
        public DicomReadStatus Load(Stream stream, DicomReadOptions options)
        {
            return Load(stream, null, options);
        }
 
        /// <summary>
        /// Loads a dicom file, stopping at a certain tag
        /// </summary>
        /// <param name="file">Filename</param>
        /// <param name="stopTag">Tag to stop parsing at</param>
        /// <param name="options">DICOM read options</param>
        public DicomReadStatus Load(String file, DicomTag stopTag, DicomReadOptions options)
        {
            using (FileStream fs = File.OpenRead(file))
            {
                DicomReadStatus status = Load(fs, stopTag, options);
 
                fs.Close();
 
                return status;
            }
        }
 
        /// <summary>
        /// Loads a dicom file from a stream, stopping at a certain tag
        /// </summary>
        /// <param name="stream">Stream containing DICOM file</param>
        /// <param name="stopTag">Tag to stop parsing at</param>
        /// <param name="options">DICOM read options</param>
        public DicomReadStatus Load(Stream stream, DicomTag stopTag, DicomReadOptions options)
        {
            stream.Seek(128, SeekOrigin.Begin);
            CheckFileHeader(stream);
            DicomStreamReader dsr = new DicomStreamReader(stream);
 
            _metainfo = new DcmFileMetaInfo();
            dsr.Dataset = _metainfo;
            dsr.Read(DcmFileMetaInfo.StopTag, options | DicomReadOptions.FileMetaInfoOnly);
 
            if (_metainfo.TransferSyntax.IsDeflate)
            {
                MemoryStream ms = StreamUtility.Deflate(stream, false);
                dsr = new DicomStreamReader(ms);
            }
 
            _dataset = new DcmDataset(_metainfo.TransferSyntax);
            dsr.Dataset = _dataset;
            DicomReadStatus status = dsr.Read(stopTag, options);
            return status;
        }


* Replace the IsDicomFile and CheckFileHeader methods with the following:

        /// <summary>
        /// Determine if the file is a DICOM file.
        /// </summary>
        /// <param name="file">File to inspect.</param>
        /// <returns></returns>
        public static bool IsDicomFile(string file)
        {
            bool isDicom = false;
            using (FileStream fs = File.OpenRead(file))
            {
                isDicom = IsDicomStream(fs);
                fs.Close();
            }
            return isDicom;
        }
 
        /// <summary>
        /// Determine if a stream contains a DICOM file.
        /// </summary>
        /// <param name="stream">The stream to inspect.</param>
        /// <returns></returns>
        public static bool IsDicomStream(Stream stream)
        {
            bool isDicom = false;
            stream.Seek(128, SeekOrigin.Begin);
            if (stream.ReadByte() == (byte)'D' ||
                stream.ReadByte() == (byte)'I' ||
                stream.ReadByte() == (byte)'C' ||
                stream.ReadByte() == (byte)'M')
                isDicom = true;
 
            return isDicom;
        }
 
        private static void CheckFileHeader(Stream stream)
        {
            if (stream.ReadByte() != (byte)'D' ||
                stream.ReadByte() != (byte)'I' ||
                stream.ReadByte() != (byte)'C' ||
                stream.ReadByte() != (byte)'M')
            {
                FileStream fs = stream as FileStream;
                if (fs != null)
                {
                    throw new DicomDataException("Invalid DICOM file: " + fs.Name);
                }
                else
                {
                    throw new DicomDataException("Invalid DICOM file in stream.");
                }
            }
        }
 
        /// <summary>
        /// Gets file stream starting at DICOM dataset
        /// </summary>
        /// <param name="file">Filename</param>
        /// <returns>File stream</returns>
        public static FileStream GetDatasetStream(String file)
        {
            FileStream fs = File.OpenRead(file);
            fs.Seek(128, SeekOrigin.Begin);
            CheckFileHeader(fs);
            DicomStreamReader dsr = new DicomStreamReader(fs);
            DcmFileMetaInfo metainfo = new DcmFileMetaInfo();
            dsr.Dataset = metainfo;
            if (dsr.Read(DcmFileMetaInfo.StopTag, DicomReadOptions.Default | DicomReadOptions.FileMetaInfoOnly) == DicomReadStatus.Success && fs.Position < fs.Length)
            {
                return fs;
            }
            fs.Close();
            return null;
        }


* Replace the Save method with the following:

        /// <summary>
        /// Saves a DICOM file to a file
        /// </summary>
        /// <param name="file">Filename</param>
        /// <param name="options">DICOM write options</param>
        public void Save(String file, DicomWriteOptions options)
        {
            // expand to full path
            file = Path.GetFullPath(file);
 
            string dir = Path.GetDirectoryName(file);
            if (!Directory.Exists(dir))
                Directory.CreateDirectory(dir);
            using (FileStream fs = File.Create(file))
            {
                Save(fs, options);
                fs.Close();
            }
        }
 
        /// <summary>
        /// Saves a DICOM file to a stream. <br/><i>Note that the caller is expected to dispose of the stream.</i>
        /// </summary>
        /// <param name="stream">Stream to place the DICOM file in</param>
        /// <param name="options">DICOM write options</param>
        public void Save(Stream stream, DicomWriteOptions options)
        {
            stream.Seek(128, SeekOrigin.Begin);
            stream.WriteByte((byte)'D');
            stream.WriteByte((byte)'I');
            stream.WriteByte((byte)'C');
            stream.WriteByte((byte)'M');
 
            DicomStreamWriter dsw = new DicomStreamWriter(stream);
            dsw.Write(_metainfo, options | DicomWriteOptions.CalculateGroupLengths);
            if (_dataset != null)
                dsw.Write(_dataset, options);
        }


7. Releasing version
* Change build mode from Debug to Release. 
* Build the solution. 
* Copy all of the files in the Dicom.Linq\bin\Release directory 